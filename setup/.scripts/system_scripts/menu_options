#!/bin/bash

menu_main () {
    # Define first layer
    options=("Wifi" "Bluetooth" "Monitors" "Audio" "Tablet-Mode" "Energy-Mode" "Themes" "Phone server" "USB" "Close")

    # display options
    selected=$(printf '%s\n' "${options[@]}" | dmenu -i)

    case $selected in 
        "Wifi")
            menu_wifi
            ;;
        "Bluetooth")
            menu_blue
            ;;
        "Monitors")
            menu_mon
            ;;
        "Audio")
            menu_audio
            ;;
        "Tablet-Mode")
            menu_tablet
            ;;
        "Energy-Mode")
            menu_energy
            ;;
        "Themes")
            menu_themes
            ;;
        "Phone server")
            menu_server
            ;;
        "USB")
            menu_usb
            ;;
        "Close")
            ;;
    esac
}

connect_to_wifi () {
    # 0/1 "$wifi_selected"/"$wifi_to_disconnect"
    
    case $1 in
        "1")
            # if wifi_selected is known already
            if nmcli connection show | grep -q -w "$2"; then

                # if no error pops up while connecting without password
                nmcli con up "$2" || \

                    # try with password
                    password=$(:| dmenu -i -p "Password:") && \
                    nmcli d wifi connect "$2" password "$password"  

                # if wifi_selected is not known 
            elif [[ ! -z $2 ]]; then

                # try with password
                password=$(:| dmenu -i -p "Password:")
                nmcli d wifi connect "$2" password "$password"  
            fi
            ;;
        "0")
            nmcli con down "$2"
            ;;
        *)
            echo "Improper use of arguments!"
            dunstify "Improper use of arguments"
            ;;
    esac
}


list_wifi_devices () {

    # wifi_selected 

    # if the list command does work
    if [[ ! -z "$(nmcli -f SSID dev wifi list)" ]]; then
        wifi_list="$(nmcli -f SSID dev wifi list | tail -n +2 | awk '{$1=$1};1')"
        wifi_selected=$(echo -e "Go back\n$wifi_list" | dmenu -i)
        echo "selected wifi: $wifi_selected"
    fi


    case $wifi_selected in
        "Go back")
            return
            ;;
        *)

            connect_to_wifi 1 "$wifi_selected"
            ;;
    esac

}


turn_wifi_controller () {
    case $1 in
        "1")
            nmcli radio wifi on
            ;;
        "0")
            nmcli radio wifi off
            ;;
        *)
            echo "Wrong use of arguments"
            dunstify "Wrong use of arguments"
            ;;
    esac
}

remove_wifi_connection () {

    wifi_list="$(nmcli -t -f NAME connection show | awk '{$1=$1};1')"
    wifi_select=$(echo -e "Go back\n$wifi_list" | dmenu -i)

    case $wifi_select in
        "lo")
            return
            ;;
        "Go back")
            return
            ;;
        *)
            nmcli connection delete "$wifi_select"
            ;;
    esac

}

menu_wifi () {
    # get wifi status
    # connection_lan=$(nmcli -t -f NAME connection show --active | head -n 1)
    connection_lan=$(nmcli connection show --active | grep ethernet | cut -d' ' -f3)
    search_for=$(nmcli connection show --active | grep wifi | cut -d' ' -f1)
    if [ ! -z $search_for ]; then
        connection_wifi=$(nmcli -t -f NAME connection show --active | grep -w $search_for)
    else
        connection_wifi=""
    fi
    wifi_status=$(nmcli radio wifi)


    case $connection_lan in
        "")
            status_lan="Not connected"
            ;;
        *)
            status_lan="Connection $connection_lan"
            ;;
    esac

    case $connection_wifi in
        "")
            case $wifi_status in
                "enabled")
                    status_wifi="Enabled"
                    ;;
                *)
                    status_wifi="Disabled"
                    ;;
            esac
            ;;
        *)
            status_wifi="Connected to $connection_wifi"
            ;;
    esac



    # options=("Internet ($status)" "Wifi list" "Go back")

    options=("Wired - ($status_lan)" "Wifi - ($status_wifi)" "Go back")

    selected=$(printf '%s\n' "${options[@]}" | dmenu -i)

    case $selected in
        "Wired - ($status_lan)")
            menu_wifi
            ;;
        "Wifi - (Enabled)")

            further_options=("List devices" "Disable Controller"  "Remove Connection" "Go back")

            further_selected=$(printf '%s\n' "${further_options[@]}" | dmenu -i)

            case $further_selected in

                "List devices")
                    list_wifi_devices
                    menu_wifi
                    ;;
                "Disable Controller")
                    turn_wifi_controller 0
                    menu_wifi
                    ;;
                "Remove Connection")
                    remove_wifi_connection 
                    menu_wifi
                    ;;
                "Go back")
                    menu_wifi
                    ;;
            esac
            ;;
        "Wifi - (Disabled)")
            further_options=("Enable Controller" "Remove Connection" "Go back")

            further_selected=$(printf '%s\n' "${further_options[@]}" | dmenu -i)

            case $further_selected in

                "Enable Controller")
                    turn_wifi_controller 1
                    menu_wifi
                    ;;
                "Remove Connection")
                    remove_wifi_connection
                    menu_wifi
                    ;;
                "Go back")
                    menu_wifi
                    ;;
            esac
            ;;
        "Wifi - ($status_wifi)")

            further_options=("Disconnect" "Disable Controller" "Go back")

            further_selected=$(printf '%s\n' "${further_options[@]}" | dmenu -i)

            case $further_selected in

                "Disconnect")
                    connect_to_wifi 0 "$connection_wifi"
                    menu_wifi
                    ;;
                "Disable Controller")
                    turn_wifi_controller 0
                    menu_wifi
                    ;;
                "Go back")
                    menu_wifi
                    ;;
            esac
            ;;
        "Go back")
            menu_main
            ;;
    esac

}

menu_blue () {

    options=( "Show devices"  "Connect devices" "Go back")

    selected=$(printf '%s\n' "${options[@]}" | dmenu -i)

    case $selected in 

        "Show devices")

            devices_options=()
            devices_list=($(bluetoothctl devices | grep -w Device | cut -d' ' -f3))

            # go through devices 
            for (( i=0; i<${#devices_list[@]}; i++)); do

                if bluetoothctl info | grep -w Name | grep ${devices_list[i]} || bluetoothctl devices Trusted | grep -w Device | grep ${devices_list[i]}; then

                    devices_options+=(${devices_list[i]})

                    if bluetoothctl info | grep -w Name | grep ${devices_list[i]}; then
                        devices_options[i]+=" (Connected)"
                    fi

                    if bluetoothctl devices Trusted | grep -w Device | grep ${devices_list[i]}; then
                        devices_options[i]+=" (Trusted)"
                    fi
                fi

            done

            devices_options+=("Go back")

            select=$(printf '%s\n' "${devices_options[@]}" | dmenu -i)

            case $select in 
                "Go back")
                    menu_blue
                    ;;
                *)

                    case $select in 
                        *"(Connected) (Trusted)"*)

                            options=("Disconnect" "Untrust" "Go back")

                            further_select=$(printf '%s\n' "${options[@]}" | dmenu -i -p "$select")

                            select=$(echo $select | cut -d' ' -f1)

                            MAC_select=$(bluetoothctl devices | grep $select | cut -d' ' -f2)

                            echo $MAC_select

                            case $further_select in 
                                "Disconnect")
                                    echo "Disconnecting $select ($MAC_select) ..."
                                    bluetoothctl disconnect $MAC_select && dunstify "Disconnected $select!" || \
                                        dunstify "Disconnecting failed!"
                                    menu_blue
                                    ;;
                                "Untrust")
                                    echo "Untrusting $select ($MAC_select) ..."
                                    bluetoothctl untrust $MAC_select && dunstify "Untrust $select succeeded!" || \
                                        dunstify "Untrust failed!"
                                    menu_blue
                                    ;;
                                "Go back")
                                    menu_blue
                                    ;;
                            esac
                            ;;
                        *"(Connected)"*)

                            options=("Disconnect" "Trust" "Go back")

                            further_select=$(printf '%s\n' "${options[@]}" | dmenu -i -p "$select")

                            select=$(echo $select | cut -d' ' -f1)

                            MAC_select=$(bluetoothctl devices | grep $select | cut -d' ' -f2)

                            echo $MAC_select

                            case $further_select in 
                                "Disconnect")
                                    echo "Disconnecting $select ($MAC_select) ..."
                                    bluetoothctl disconnect $MAC_select && dunstify "Disconnected $select!" || \
                                        dunstify "Disconnecting failed!"
                                    menu_blue
                                    ;;
                                "Trust")
                                    echo "Trusting $select ($MAC_select) ..."
                                    bluetoothctl trust $MAC_select $$ dunstify "Trusting $selected succeeded!" || \
                                        dunstify "Trusting failed!"
                                    menu_blue
                                    ;;
                                "Go back")
                                    menu_blue
                                    ;;
                            esac
                            ;;
                        *"(Trusted)"*)

                            options=("Connect" "Untrust" "Go back")

                            further_select=$(printf '%s\n' "${options[@]}" | dmenu -i -p "$select")

                            select=$(echo $select | cut -d' ' -f1)

                            MAC_select=$(bluetoothctl devices | grep $select | cut -d' ' -f2)

                            echo $MAC_select

                            case $further_select in 
                                "Connect")
                                    echo "Connecting $select ($MAC_select) ..."
                                    bluetoothctl connect $MAC_select && dunstify "Connected to $select" || \
                                        dunstify "Connection failed!"
                                    menu_blue
                                    ;;
                                "Untrust")
                                    echo "Untrusting $select ($MAC_select) ..."
                                    bluetoothctl untrust $MAC_select && dunstify "Untrust successful!" || \
                                        dunstify "Untrust failed!"
                                    menu_blue
                                    ;;
                                "Go back")
                                    menu_blue
                                    ;;
                            esac
                            ;;
                    esac
                    
                    ;;
            esac
            ;;

        
        "Connect devices")

            duration=6

            bluetoothctl scan on &

            # Sleep for the desired duration
            sleep "$duration"

            # Stop the scan by killing the background process
            kill $(pgrep bluetoothctl)

            # Wait for the background process to finish
            wait



            available_devices=($(bluetoothctl devices | cut -d' ' -f3))
    
            # add go back option
            devices_options=()

            for (( i=0; i<${#available_devices[@]}; i++)); do

                if  bluetoothctl devices Connected | grep -w Device | grep ${available_devices[i]}; then

                    echo "${available_devices[i]} already connected!"

                else

                    if bluetoothctl devices Trusted | grep -w Device | grep ${available_devices[i]}; then

                        echo "${available_devices[i]} not connected but trusted!"

                    else

                        devices_options+=("${available_devices[i]}")
                    fi

                fi

            done

            devices_options+=("Go back")

            select=$(printf '%s\n'  "${devices_options[@]}" | dmenu -i)

            case $select in

                "Go back")
                    menu_blue
                    ;;
                *)

                    for (( i=0; i<${#available_devices[@]}; i++ )); do
                        string_to_add=$(bluetoothctl devices | grep -w ${available_devices[$i]} | cut -d' ' -f2)
                        available_devices[$i]+=" $string_to_add"
                    done


                    for (( i=0; i<${#available_devices[@]}; i++ )); do
                        MAC_select=$(echo ${available_devices[i]} | grep $select | cut -d' ' -f2)
                    done

                    echo "Trying to connect to: $MAC_select"
                    bluetoothctl connect $MAC_select && dunstify "Connected to $select!" || \
                        dunstify "Connection failed!"
                    menu_blue
                    ;;

            esac


            ;;


        "Go back")
            menu_main
            ;;
    esac

}

menu_mon () {

   # Run xrandr and search for HDMI-A-0
   if xrandr | grep -q "HDMI-A-0 connected"; then
       # HDMI-A-0 is connected, enabling the monitor
       xrandr --output HDMI-A-0 --auto --right-of eDP
       # xrandr --output DVI-D-1 --off && xrandr --output DVI-D-1 --auto --right-of HDMI-1
       xwallpaper --zoom ~/.config/wall/picture 

   else
       # HDMI-A-0 is not connected, disabling the monitor
       xrandr --output HDMI-A-0 --off
       xwallpaper --zoom ~/.config/wall/picture 
   fi  

}

menu_tablet () {
    
    status_kb=$(xinput list-props 12 | grep "Device Enabled" | awk '{print $4}')
    status_kb_short=""
    if [[ $status_kb = 1 ]]; then 
        status_kb_short="Laptop-mode"
    elif [[ $status_kb = 0 ]]; then
        status_kb_short="Tablet-mode"
    fi

    options=( $status_kb_short "Go Back" )

    selected=$(printf '%s\n' "${options[@]}" | dmenu -i)

    case $selected in
        $status_kb_short )

            if [[ $status_kb = 1 ]]; then 
                xinput disable 12
            elif [[ $status_kb = 0 ]]; then
                xinput enable 12
            fi
            ;;
        "Go Back" )
            menu_options 
            ;;
    esac
}

menu_themes () {
    options=("Arch-Dark" "Arch-Light" "Arch-Cyan" "Triangle-Blue" "Go back") 
    selected=$(printf '%s\n' "${options[@]}" | dmenu -i -p "Select Theme:")

    case $selected in 
        "Arch-Dark")
            set-arch-dark
            ;;#

        "Arch-Light")
            set-arch-light
            ;;

        "Arch-Cyan")
            set-arch-cyan
            ;;

        "Triangle-Blue")
            set-triangle-blue
            ;;
        "Go back")
            menu_options
            ;;
    esac
}

menu_server () {

    connection_lan=$(nmcli -t -f NAME connection show --active | head -n 1)

    connection_wifi=$(nmcli radio wifi)

    if [[ $connection_lan == "Wired connection 1" ]]; then
        status="Enabled - Wired"
    elif [[ $connection_wifi == "enabled" && $connection_lan == "lo" ]]; then
        status="Enabled - Not Connected" 
    elif [[ $connection_wifi == "enabled" ]]; then
        status="Enabled - Connected to $(nmcli -t -f NAME connection show --active | head -n 1)"
    else 
        status="Disabled"
    fi

    
    options=( "Internet ($status)" "Get Remnote images" "Get Images" "Get Documents" "Go back" ) 
    selected=$(printf '%s\n' "${options[@]}" | dmenu -i )

    case $selected in 
        "Internet ($status)")
            menu_wifi
            ;;
        "Get Remnote images")
            st -e bash -c "
            transfer_from_remote.sh ~/Pictures/Remnote
            "
            ;;
        "Get Images")
            st -e bash -c "
            transfer_from_remote.sh ~/Pictures/Server
            "
            ;;
        "Get Documents")
            st -e bash -c "
            transfer_from_remote.sh ~/Documents
            "
            ;;
        "Go back")
            menu_options 
            ;;
    esac

}

menu_usb () {

    #devices found by udisksctl
    lsblk_print=$(lsblk -no name,type,mountpoints | grep -A1 disk)

    devices=($(lsblk -no name,type | grep disk | awk '{print $1}'))


    mounted_usb_devices=()

    unmounted_usb_devices=()

    usb_devices=()

    for device in "${devices[@]}"; do
        connection_type=$(lsblk -no tran /dev/$device)
        is_mounted=$(lsblk -no mountpoints,name | grep $device | awk '{print $2}')
        if [[  $connection_type == "usb" ]]; then

            usb_devices+=("$device")

            if [[ ! $is_mounted == "" ]]; then
                mounted_usb_devices+=("$device")
            else
                unmounted_usb_devices+=("$device")
            fi

        fi
    done
    
    # Iterate the loop to read and print each array element
    
    pretty_mounted_names=()

    for value in "${mounted_usb_devices[@]}"; do
        # get the name of $value
        properties=$(udevadm info --query=property --name=/dev/$value)
        vendor=$(echo "$properties" | grep -e "ID_VENDOR=" | awk -F "=" '{print $2}')
        model=$(echo "$properties" | grep -e "ID_MODEL=" | awk -F "=" '{print $2}')
        pretty_mounted_names+=("$value -- $vendor $model")

    done

    mounted_usb_names=$(
    for value in "${pretty_mounted_names[@]}"
    do
        echo $value
    done
    )

    pretty_unmounted_names=()

    for value in "${unmounted_usb_devices[@]}"; do
        # get the name of $value
        properties=$(udevadm info --query=property --name=/dev/$value)
        vendor=$(echo "$properties" | grep -e "ID_VENDOR=" | awk -F "=" '{print $2}')
        model=$(echo "$properties" | grep -e "ID_MODEL=" | awk -F "=" '{print $2}')
        pretty_unmounted_names+=("$value -- $vendor $model")

    done

    unmounted_usb_names=$(
    for value in "${pretty_unmounted_names[@]}"
    do
        echo $value
    done
    )

    echo "M:${pretty_mounted_names[0]}"

    echo "U:${pretty_unmounted_names[0]}"

    
    options=( "Mount" "Unmount" "Go back" )
    
    selected=$(printf '%s\n' "${options[@]}" | dmenu -i)

    mounted_options=("$mounted_usb_names" "Go back")

    unmounted_options=("$unmounted_usb_names" "Go back")

    echo $mounted_options

    echo $unmounted_options

    case $selected in
        "Mount")
            new_selected=$(printf '%s\n' "${unmounted_options[@]}" | dmenu -i | awk '{print $1}')
            case $new_selected in
                "Go back" )
                    menu_options usb
                    ;;
                *)
                    udisksctl mount -b /dev/${new_selected} && dunstify "$new_selected mounted" || udisksctl mount -b /dev/${new_selected}1 && dunstify "${new_selected}1 mounted" || dunstify "Disk probably in use!"
                    ;;
            esac
            ;;
        "Unmount")
            new_selected=$(printf '%s\n' "${mounted_options[@]}" | dmenu -i | awk '{print $1}')
            case $new_selected in
                "Go back" )
                    menu_options usb
                    ;;
                *)
                    udisksctl unmount -b /dev/${new_selected} && dunstify "$new_selected unmounted" || udisksctl unmount -b /dev/${new_selected}1 && dunstify "${new_selected}1 unmounted" || dunstify "Disk probably in use!"
                    ;;
            esac
            ;;
        "Go back")
            menu_options
            ;;
    esac


}

case $1 in
    "wifi" )
        menu_wifi
        ;;
    "blue" )
        menu_blue
        ;;
    "mon" )
        menu_mon
        ;;
    "tablet" )
        menu_tablet
        ;;
    "theme" )
        menu_theme
        ;;
    "usb" )
        menu_usb
        ;;
    * )
        menu_main
        ;;
esac




